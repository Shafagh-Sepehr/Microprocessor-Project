
transmiter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00000e14  00000ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800150  00800150  00000f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b0a  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00002c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e34  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000424c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f8  00000000  00000000  00004afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005cf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 35       	cpi	r26, 0x50	; 80
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e5       	ldi	r26, 0x50	; 80
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 05 	call	0xba8	; 0xba8 <main>
  8a:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
#define LCD_RW 3 //LCD RW
#define LCD_RS 4 //LCD RS

void lcd_command( unsigned char cmnd )
{
	LCD_DPRT = cmnd; //send cmnd to data port
  92:	85 bb       	out	0x15, r24	; 21
	LCD_CPRT &= ~ (1<<LCD_RS); //RS = 0 for command
  94:	94 98       	cbi	0x12, 4	; 18
	LCD_CPRT &= ~ (1<<LCD_RW); //RW = 0 for write
  96:	93 98       	cbi	0x12, 3	; 18
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  98:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 ef       	ldi	r24, 0xF3	; 243
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_command+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_command+0x12>
  a4:	00 00       	nop
	_delay_us(2000); //wait to make enable wide
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  a6:	90 98       	cbi	0x12, 0	; 18
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_command+0x20>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <lcd_data>:
	_delay_us(2000); //wait to make enable wide
}

void lcd_data( unsigned char data )
{
	LCD_DPRT = data; //send data to data port
  b6:	85 bb       	out	0x15, r24	; 21
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
  b8:	94 9a       	sbi	0x12, 4	; 18
	LCD_CPRT &= ~ (1<<LCD_RW); //RW = 0 for write
  ba:	93 98       	cbi	0x12, 3	; 18
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  bc:	90 9a       	sbi	0x12, 0	; 18
  be:	83 ef       	ldi	r24, 0xF3	; 243
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_data+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_data+0x12>
  c8:	00 00       	nop
	_delay_us(2000); //wait to make enable wide
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  ca:	90 98       	cbi	0x12, 0	; 18
  cc:	83 ef       	ldi	r24, 0xF3	; 243
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_data+0x20>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcd_init>:
	_delay_us(2000); //wait to make enable wide
}

void lcd_init()
{
	LCD_DDDR = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	LCD_CDDR = 0xFF;
  de:	81 bb       	out	0x11, r24	; 17
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
  e0:	90 98       	cbi	0x12, 0	; 18
  e2:	83 ef       	ldi	r24, 0xF3	; 243
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_init+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_init+0x12>
  ec:	00 00       	nop
	_delay_us(2000); //wait for init.
	lcd_command(0x38); //init. LCD 2 line, 5 Ã— 7 matrix
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0C); //display on, cursor off
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x01); //clear LCD
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 100:	83 ef       	ldi	r24, 0xF3	; 243
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x2a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x30>
 10a:	00 00       	nop
	_delay_us(2000); //wait
	lcd_command(0x06); //shift cursor right
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 112:	08 95       	ret

00000114 <lcd_print>:
}

void lcd_print( char * str )
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(str[i]!=0)
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	59 f0       	breq	.+22     	; 0x138 <lcd_print+0x24>
 122:	8f 01       	movw	r16, r30
 124:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_data(str[i]);
 126:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		i++ ;
 12a:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print( char * str )
{
	unsigned char i = 0;
	while(str[i]!=0)
 12c:	f8 01       	movw	r30, r16
 12e:	ec 0f       	add	r30, r28
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	f7 cf       	rjmp	.-18     	; 0x126 <lcd_print+0x12>
	{
		lcd_data(str[i]);
		i++ ;
	}
}
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <clear_and_go_home>:

void clear_and_go_home(){
lcd_command(0x01);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0x02);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 14c:	08 95       	ret

0000014e <keypad_init>:
	{'7','8','9'},
	{'*','0','#'}
};

void keypad_init() {
	KEY_DDR = 0xF0; //makes usart port input again but it's ok
 14e:	80 ef       	ldi	r24, 0xF0	; 240
 150:	8a bb       	out	0x1a, r24	; 26
	KEY_PORT |= 0xFE;
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	8e 6f       	ori	r24, 0xFE	; 254
 156:	8b bb       	out	0x1b, r24	; 27
	KEY_PORT &= 0x0E; //ground all rows at once
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	8e 70       	andi	r24, 0x0E	; 14
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	08 95       	ret

00000160 <keypad_scan>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	93 e1       	ldi	r25, 0x13	; 19
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <keypad_scan+0x4>
 168:	00 c0       	rjmp	.+0      	; 0x16a <keypad_scan+0xa>
 16a:	00 00       	nop
	
	do {
		do {
			
			_delay_ms(20); //call delay
			colloc = (KEY_PIN & 0x0E); //see if any key is pressed
 16c:	89 b3       	in	r24, 0x19	; 25
		} while (colloc == 0x0E); //keep checking for key press
 16e:	8e 70       	andi	r24, 0x0E	; 14
 170:	8e 30       	cpi	r24, 0x0E	; 14
 172:	b1 f3       	breq	.-20     	; 0x160 <keypad_scan>
 174:	87 e8       	ldi	r24, 0x87	; 135
 176:	93 e1       	ldi	r25, 0x13	; 19
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <keypad_scan+0x18>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <keypad_scan+0x1e>
 17e:	00 00       	nop
		_delay_ms(20); //call delay for debounce
		colloc = (KEY_PIN & 0x0E); //read columns
 180:	89 b3       	in	r24, 0x19	; 25
	} while (colloc == 0x0E); //wait for key press
 182:	8e 70       	andi	r24, 0x0E	; 14
 184:	8e 30       	cpi	r24, 0x0E	; 14
 186:	61 f3       	breq	.-40     	; 0x160 <keypad_scan>
	
	while (1) {
		KEY_PORT = 0xEE; //ground row 0
 188:	8e ee       	ldi	r24, 0xEE	; 238
 18a:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0E); //read the columns
 18c:	99 b3       	in	r25, 0x19	; 25
 18e:	9e 70       	andi	r25, 0x0E	; 14

		if (colloc != 0x0E) //column detected
 190:	9e 30       	cpi	r25, 0x0E	; 14
 192:	91 f4       	brne	.+36     	; 0x1b8 <keypad_scan+0x58>
		{
			rowloc = 0; //save row location
			break; //exit while loop
		}
		KEY_PORT = 0xDE; //ground row 1
 194:	8e ed       	ldi	r24, 0xDE	; 222
 196:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0E); //read the columns
 198:	99 b3       	in	r25, 0x19	; 25
 19a:	9e 70       	andi	r25, 0x0E	; 14
		if (colloc != 0x0E) //column detected
 19c:	9e 30       	cpi	r25, 0x0E	; 14
 19e:	71 f4       	brne	.+28     	; 0x1bc <keypad_scan+0x5c>
		{
			rowloc = 1; //save row location
			break; //exit while loop
		}
		KEY_PORT = 0xBE; //ground row 2
 1a0:	8e eb       	ldi	r24, 0xBE	; 190
 1a2:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0E); //read the columns
 1a4:	99 b3       	in	r25, 0x19	; 25
 1a6:	9e 70       	andi	r25, 0x0E	; 14
		if (colloc != 0x0E) //column detected
 1a8:	9e 30       	cpi	r25, 0x0E	; 14
 1aa:	51 f4       	brne	.+20     	; 0x1c0 <keypad_scan+0x60>
		{
			rowloc = 2; //save row location
			break; //exit while loop
		}
		KEY_PORT = 0x7E; //ground row 3
 1ac:	8e e7       	ldi	r24, 0x7E	; 126
 1ae:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0E); //read the columns
 1b0:	99 b3       	in	r25, 0x19	; 25
 1b2:	9e 70       	andi	r25, 0x0E	; 14
		rowloc = 3; //save row location
 1b4:	83 e0       	ldi	r24, 0x03	; 3
		break; //exit while loop
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <keypad_scan+0x62>
		KEY_PORT = 0xEE; //ground row 0
		colloc = (KEY_PIN & 0x0E); //read the columns

		if (colloc != 0x0E) //column detected
		{
			rowloc = 0; //save row location
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <keypad_scan+0x62>
		}
		KEY_PORT = 0xDE; //ground row 1
		colloc = (KEY_PIN & 0x0E); //read the columns
		if (colloc != 0x0E) //column detected
		{
			rowloc = 1; //save row location
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <keypad_scan+0x62>
		}
		KEY_PORT = 0xBE; //ground row 2
		colloc = (KEY_PIN & 0x0E); //read the columns
		if (colloc != 0x0E) //column detected
		{
			rowloc = 2; //save row location
 1c0:	82 e0       	ldi	r24, 0x02	; 2
		break; //exit while loop
	}
	//check column and send result to Port D
	//1100 1010 0110
	char temp;
	if (colloc == 0x0C)
 1c2:	9c 30       	cpi	r25, 0x0C	; 12
 1c4:	59 f4       	brne	.+22     	; 0x1dc <keypad_scan+0x7c>
	temp = keypad[rowloc][0];
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	8e 0f       	add	r24, r30
 1d0:	9f 1f       	adc	r25, r31
 1d2:	fc 01       	movw	r30, r24
 1d4:	e9 59       	subi	r30, 0x99	; 153
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	17 c0       	rjmp	.+46     	; 0x20a <keypad_scan+0xaa>
	else if (colloc == 0x0A)
 1dc:	9a 30       	cpi	r25, 0x0A	; 10
 1de:	59 f4       	brne	.+22     	; 0x1f6 <keypad_scan+0x96>
	temp = keypad[rowloc][1];
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	8e 0f       	add	r24, r30
 1ea:	9f 1f       	adc	r25, r31
 1ec:	fc 01       	movw	r30, r24
 1ee:	e9 59       	subi	r30, 0x99	; 153
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	81 81       	ldd	r24, Z+1	; 0x01
 1f4:	0a c0       	rjmp	.+20     	; 0x20a <keypad_scan+0xaa>
	else
	temp = keypad[rowloc][2];
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	8e 0f       	add	r24, r30
 200:	9f 1f       	adc	r25, r31
 202:	fc 01       	movw	r30, r24
 204:	e9 59       	subi	r30, 0x99	; 153
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	82 81       	ldd	r24, Z+2	; 0x02
	
	KEY_PORT |= 0x0E;
 20a:	9b b3       	in	r25, 0x1b	; 27
 20c:	9e 60       	ori	r25, 0x0E	; 14
 20e:	9b bb       	out	0x1b, r25	; 27
	return temp;
}
 210:	08 95       	ret

00000212 <eeprom_read>:
#include <stdlib.h>
#ifndef EEPROM_H_
#define EEPROM_H_

unsigned char eeprom_read(unsigned int address){
	while(EECR & (1<<EEWE)); //wait for last write to finish
 212:	e1 99       	sbic	0x1c, 1	; 28
 214:	fe cf       	rjmp	.-4      	; 0x212 <eeprom_read>
	EEAR = address & 0x03FF; //write address to address register
 216:	93 70       	andi	r25, 0x03	; 3
 218:	9f bb       	out	0x1f, r25	; 31
 21a:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //start EEPROM read by writing EERE
 21c:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 21e:	8d b3       	in	r24, 0x1d	; 29
}
 220:	08 95       	ret

00000222 <eeprom_write>:

void eeprom_write(unsigned int address, unsigned char data){
	while(EECR & (1<<EEWE)); //wait for last write to finish
 222:	e1 99       	sbic	0x1c, 1	; 28
 224:	fe cf       	rjmp	.-4      	; 0x222 <eeprom_write>
	EEAR = address & 0x03FF; //write 0x5F to address register
 226:	93 70       	andi	r25, 0x03	; 3
 228:	9f bb       	out	0x1f, r25	; 31
 22a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data; //write data to data register
 22c:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //write one to EEMWE
 22e:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //start EEPROM write
 230:	e1 9a       	sbi	0x1c, 1	; 28
 232:	08 95       	ret

00000234 <cal_checksum>:
}

unsigned char cal_checksum(unsigned int n){
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	unsigned char checksum = 0;
	for (unsigned int i = 0; i < n; i++)
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	69 f0       	breq	.+26     	; 0x25c <cal_checksum+0x28>
 242:	7c 01       	movw	r14, r24
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	10 e0       	ldi	r17, 0x00	; 0
		checksum += eeprom_read(i);
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 250:	18 0f       	add	r17, r24
	EECR |= (1<<EEWE); //start EEPROM write
}

unsigned char cal_checksum(unsigned int n){
	unsigned char checksum = 0;
	for (unsigned int i = 0; i < n; i++)
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	ec 16       	cp	r14, r28
 256:	fd 06       	cpc	r15, r29
 258:	c1 f7       	brne	.-16     	; 0x24a <cal_checksum+0x16>
 25a:	01 c0       	rjmp	.+2      	; 0x25e <cal_checksum+0x2a>
	EECR |= (1<<EEMWE); //write one to EEMWE
	EECR |= (1<<EEWE); //start EEPROM write
}

unsigned char cal_checksum(unsigned int n){
	unsigned char checksum = 0;
 25c:	10 e0       	ldi	r17, 0x00	; 0
	for (unsigned int i = 0; i < n; i++)
		checksum += eeprom_read(i);
	return (~checksum) + 1;
}
 25e:	81 2f       	mov	r24, r17
 260:	81 95       	neg	r24
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <eeprom_first_time_boot>:

void eeprom_first_time_boot(){
	eeprom_write(0,'G');
 26e:	67 e4       	ldi	r22, 0x47	; 71
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(1,0x01);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(2,'0');
 282:	60 e3       	ldi	r22, 0x30	; 48
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(3,'0');
 28c:	60 e3       	ldi	r22, 0x30	; 48
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(4,'0');
 296:	60 e3       	ldi	r22, 0x30	; 48
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(5,'0');
 2a0:	60 e3       	ldi	r22, 0x30	; 48
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write(6, cal_checksum(6));
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 1a 01 	call	0x234	; 0x234 <cal_checksum>
 2b2:	68 2f       	mov	r22, r24
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
 2bc:	08 95       	ret

000002be <eeprom_init>:
	//lcd_data(cal_checksum(6));

}

unsigned char eeprom_init(unsigned char** passwords){
 2be:	5f 92       	push	r5
 2c0:	6f 92       	push	r6
 2c2:	7f 92       	push	r7
 2c4:	8f 92       	push	r8
 2c6:	9f 92       	push	r9
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8c 01       	movw	r16, r24
	unsigned char first = eeprom_read(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>

	if(first != 'G'){
 2e6:	87 34       	cpi	r24, 0x47	; 71
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <eeprom_init+0x38>
		
		eeprom_first_time_boot();
 2ea:	0e 94 37 01 	call	0x26e	; 0x26e <eeprom_first_time_boot>
		return eeprom_init(passwords);
 2ee:	c8 01       	movw	r24, r16
 2f0:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 2f4:	89 c0       	rjmp	.+274    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}

	unsigned char count = eeprom_read(1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 2fe:	58 2e       	mov	r5, r24
	
	(*passwords) = (unsigned char*)malloc(sizeof(unsigned char)*count*4);
 300:	c8 2f       	mov	r28, r24
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	cc 0f       	add	r28, r28
 306:	dd 1f       	adc	r29, r29
 308:	cc 0f       	add	r28, r28
 30a:	dd 1f       	adc	r29, r29
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 e7 05 	call	0xbce	; 0xbce <malloc>
 312:	f8 01       	movw	r30, r16
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	80 83       	st	Z, r24


	unsigned char checksum = eeprom_read((count*4)+2);
 318:	ce 01       	movw	r24, r28
 31a:	02 96       	adiw	r24, 0x02	; 2
 31c:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 320:	68 2e       	mov	r6, r24
	for (unsigned char i = 0; i<count; i++) {
 322:	55 20       	and	r5, r5
 324:	09 f4       	brne	.+2      	; 0x328 <eeprom_init+0x6a>
 326:	59 c0       	rjmp	.+178    	; 0x3da <eeprom_init+0x11c>
 328:	0f 2e       	mov	r0, r31
 32a:	f3 e0       	ldi	r31, 0x03	; 3
 32c:	ef 2e       	mov	r14, r31
 32e:	f1 2c       	mov	r15, r1
 330:	f0 2d       	mov	r31, r0
 332:	c2 e0       	ldi	r28, 0x02	; 2
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	71 2c       	mov	r7, r1
 338:	6e 01       	movw	r12, r28
 33a:	f2 e0       	ldi	r31, 0x02	; 2
 33c:	cf 1a       	sub	r12, r31
 33e:	d1 08       	sbc	r13, r1
		(*passwords)[i*4]   = eeprom_read((i*4)+2);
 340:	f8 01       	movw	r30, r16
 342:	a0 80       	ld	r10, Z
 344:	b1 80       	ldd	r11, Z+1	; 0x01
 346:	ac 0c       	add	r10, r12
 348:	bd 1c       	adc	r11, r13
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 350:	f5 01       	movw	r30, r10
 352:	80 83       	st	Z, r24
 354:	4e 01       	movw	r8, r28
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	8f 1a       	sub	r8, r31
 35a:	91 08       	sbc	r9, r1
		(*passwords)[i*4+1] = eeprom_read((i*4)+3);
 35c:	f8 01       	movw	r30, r16
 35e:	a0 80       	ld	r10, Z
 360:	b1 80       	ldd	r11, Z+1	; 0x01
 362:	a8 0c       	add	r10, r8
 364:	b9 1c       	adc	r11, r9
 366:	c7 01       	movw	r24, r14
 368:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 36c:	f5 01       	movw	r30, r10
 36e:	80 83       	st	Z, r24
		(*passwords)[i*4+2] = eeprom_read((i*4)+4);
 370:	f8 01       	movw	r30, r16
 372:	a0 80       	ld	r10, Z
 374:	b1 80       	ldd	r11, Z+1	; 0x01
 376:	ac 0e       	add	r10, r28
 378:	bd 1e       	adc	r11, r29
 37a:	ce 01       	movw	r24, r28
 37c:	02 96       	adiw	r24, 0x02	; 2
 37e:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 382:	f5 01       	movw	r30, r10
 384:	80 83       	st	Z, r24
		(*passwords)[i*4+3] = eeprom_read((i*4)+5);
 386:	f8 01       	movw	r30, r16
 388:	a0 80       	ld	r10, Z
 38a:	b1 80       	ldd	r11, Z+1	; 0x01
 38c:	ae 0c       	add	r10, r14
 38e:	bf 1c       	adc	r11, r15
 390:	ce 01       	movw	r24, r28
 392:	03 96       	adiw	r24, 0x03	; 3
 394:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 398:	f5 01       	movw	r30, r10
 39a:	80 83       	st	Z, r24

			
		checksum += (*passwords)[i*4]  +
 39c:	f8 01       	movw	r30, r16
 39e:	80 81       	ld	r24, Z
 3a0:	91 81       	ldd	r25, Z+1	; 0x01
					(*passwords)[i*4+1]+
					(*passwords)[i*4+2]+
 3a2:	dc 01       	movw	r26, r24
 3a4:	ac 0f       	add	r26, r28
 3a6:	bd 1f       	adc	r27, r29
					(*passwords)[i*4+3];
 3a8:	fc 01       	movw	r30, r24
 3aa:	ee 0d       	add	r30, r14
 3ac:	ff 1d       	adc	r31, r15
		(*passwords)[i*4+1] = eeprom_read((i*4)+3);
		(*passwords)[i*4+2] = eeprom_read((i*4)+4);
		(*passwords)[i*4+3] = eeprom_read((i*4)+5);

			
		checksum += (*passwords)[i*4]  +
 3ae:	3c 91       	ld	r19, X
 3b0:	20 81       	ld	r18, Z
 3b2:	23 0f       	add	r18, r19
 3b4:	fc 01       	movw	r30, r24
 3b6:	ec 0d       	add	r30, r12
 3b8:	fd 1d       	adc	r31, r13
 3ba:	30 81       	ld	r19, Z
 3bc:	23 0f       	add	r18, r19
					(*passwords)[i*4+1]+
 3be:	fc 01       	movw	r30, r24
 3c0:	e8 0d       	add	r30, r8
 3c2:	f9 1d       	adc	r31, r9
		(*passwords)[i*4+1] = eeprom_read((i*4)+3);
		(*passwords)[i*4+2] = eeprom_read((i*4)+4);
		(*passwords)[i*4+3] = eeprom_read((i*4)+5);

			
		checksum += (*passwords)[i*4]  +
 3c4:	90 81       	ld	r25, Z
 3c6:	82 2f       	mov	r24, r18
 3c8:	89 0f       	add	r24, r25
 3ca:	68 0e       	add	r6, r24
	
	(*passwords) = (unsigned char*)malloc(sizeof(unsigned char)*count*4);


	unsigned char checksum = eeprom_read((count*4)+2);
	for (unsigned char i = 0; i<count; i++) {
 3cc:	73 94       	inc	r7
 3ce:	24 96       	adiw	r28, 0x04	; 4
 3d0:	f4 e0       	ldi	r31, 0x04	; 4
 3d2:	ef 0e       	add	r14, r31
 3d4:	f1 1c       	adc	r15, r1
 3d6:	57 10       	cpse	r5, r7
 3d8:	af cf       	rjmp	.-162    	; 0x338 <eeprom_init+0x7a>


	checksum+='G';
	checksum+=count;

	if(checksum!=0){
 3da:	87 e4       	ldi	r24, 0x47	; 71
 3dc:	85 0d       	add	r24, r5
 3de:	68 0e       	add	r6, r24
 3e0:	91 f0       	breq	.+36     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		lcd_data(';');
 3e2:	8b e3       	ldi	r24, 0x3B	; 59
 3e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
 3e8:	2f e3       	ldi	r18, 0x3F	; 63
 3ea:	8d e0       	ldi	r24, 0x0D	; 13
 3ec:	93 e0       	ldi	r25, 0x03	; 3
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <eeprom_init+0x130>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <eeprom_init+0x13a>
 3f8:	00 00       	nop
		_delay_ms(1000);
		eeprom_first_time_boot();
 3fa:	0e 94 37 01 	call	0x26e	; 0x26e <eeprom_first_time_boot>
		return eeprom_init(passwords);
 3fe:	c8 01       	movw	r24, r16
 400:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}

	return count;
 406:	85 2d       	mov	r24, r5
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	8f 90       	pop	r8
 420:	7f 90       	pop	r7
 422:	6f 90       	pop	r6
 424:	5f 90       	pop	r5
 426:	08 95       	ret

00000428 <eeprom_change_password>:

void eeprom_change_password(unsigned char index, unsigned char* new_password){
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	08 2f       	mov	r16, r24
 438:	d6 2f       	mov	r29, r22
 43a:	c7 2f       	mov	r28, r23
	unsigned char count = eeprom_read(1);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 444:	d8 2e       	mov	r13, r24

	for (char i=0; i<4;i++)
		eeprom_write(index*4+2+i,new_password[i]);
 446:	10 e0       	ldi	r17, 0x00	; 0
 448:	00 0f       	add	r16, r16
 44a:	11 1f       	adc	r17, r17
 44c:	00 0f       	add	r16, r16
 44e:	11 1f       	adc	r17, r17
 450:	ed 2e       	mov	r14, r29
 452:	fc 2e       	mov	r15, r28
 454:	e8 01       	movw	r28, r16
 456:	22 96       	adiw	r28, 0x02	; 2
 458:	0a 5f       	subi	r16, 0xFA	; 250
 45a:	1f 4f       	sbci	r17, 0xFF	; 255
 45c:	f7 01       	movw	r30, r14
 45e:	61 91       	ld	r22, Z+
 460:	7f 01       	movw	r14, r30
 462:	ce 01       	movw	r24, r28
 464:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
 468:	21 96       	adiw	r28, 0x01	; 1
}

void eeprom_change_password(unsigned char index, unsigned char* new_password){
	unsigned char count = eeprom_read(1);

	for (char i=0; i<4;i++)
 46a:	c0 17       	cp	r28, r16
 46c:	d1 07       	cpc	r29, r17
 46e:	b1 f7       	brne	.-20     	; 0x45c <eeprom_change_password+0x34>
		eeprom_write(index*4+2+i,new_password[i]);
	
	clear_and_go_home();
 470:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
	
	eeprom_write(count*4+2,cal_checksum(count*4+2));
 474:	cd 2d       	mov	r28, r13
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	cc 0f       	add	r28, r28
 47a:	dd 1f       	adc	r29, r29
 47c:	cc 0f       	add	r28, r28
 47e:	dd 1f       	adc	r29, r29
 480:	22 96       	adiw	r28, 0x02	; 2
 482:	ce 01       	movw	r24, r28
 484:	0e 94 1a 01 	call	0x234	; 0x234 <cal_checksum>
 488:	68 2f       	mov	r22, r24
 48a:	ce 01       	movw	r24, r28
 48c:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	08 95       	ret

000004a0 <eeprom_add_password>:

void eeprom_add_password(unsigned char* new_password){
 4a0:	af 92       	push	r10
 4a2:	bf 92       	push	r11
 4a4:	df 92       	push	r13
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	d8 2f       	mov	r29, r24
 4b4:	c9 2f       	mov	r28, r25
	unsigned char count = eeprom_read(1);
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 09 01 	call	0x212	; 0x212 <eeprom_read>
 4be:	d8 2e       	mov	r13, r24

	
		
	for (char i=0; i<4;i++)
		eeprom_write(count*4+2+i, new_password[i]);
 4c0:	e8 2e       	mov	r14, r24
 4c2:	f1 2c       	mov	r15, r1
 4c4:	ee 0c       	add	r14, r14
 4c6:	ff 1c       	adc	r15, r15
 4c8:	ee 0c       	add	r14, r14
 4ca:	ff 1c       	adc	r15, r15
 4cc:	0d 2f       	mov	r16, r29
 4ce:	1c 2f       	mov	r17, r28
 4d0:	e7 01       	movw	r28, r14
 4d2:	22 96       	adiw	r28, 0x02	; 2
 4d4:	57 01       	movw	r10, r14
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	a8 0e       	add	r10, r24
 4da:	b1 1c       	adc	r11, r1
 4dc:	f8 01       	movw	r30, r16
 4de:	61 91       	ld	r22, Z+
 4e0:	8f 01       	movw	r16, r30
 4e2:	ce 01       	movw	r24, r28
 4e4:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
 4e8:	21 96       	adiw	r28, 0x01	; 1
void eeprom_add_password(unsigned char* new_password){
	unsigned char count = eeprom_read(1);

	
		
	for (char i=0; i<4;i++)
 4ea:	ca 15       	cp	r28, r10
 4ec:	db 05       	cpc	r29, r11
 4ee:	b1 f7       	brne	.-20     	; 0x4dc <eeprom_add_password+0x3c>
		eeprom_write(count*4+2+i, new_password[i]);

	
	eeprom_write(1,count+1);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	6d 0d       	add	r22, r13
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
	eeprom_write((count+1)*4+2,cal_checksum((count+1)*4+2));
 4fc:	f6 e0       	ldi	r31, 0x06	; 6
 4fe:	ef 0e       	add	r14, r31
 500:	f1 1c       	adc	r15, r1
 502:	c7 01       	movw	r24, r14
 504:	0e 94 1a 01 	call	0x234	; 0x234 <cal_checksum>
 508:	68 2f       	mov	r22, r24
 50a:	c7 01       	movw	r24, r14
 50c:	0e 94 11 01 	call	0x222	; 0x222 <eeprom_write>
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	08 95       	ret

00000524 <password_text>:
unsigned char tries = 0;
unsigned char password_count = 0;


void password_text(){
	lcd_print("enter password:");
 524:	83 e7       	ldi	r24, 0x73	; 115
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	lcd_command(0x0F);
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0xC0);
 532:	80 ec       	ldi	r24, 0xC0	; 192
 534:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_data('>');
 538:	8e e3       	ldi	r24, 0x3E	; 62
 53a:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
 53e:	08 95       	ret

00000540 <interrupt_init>:
	
}

void interrupt_init(){
	DDRB &= ~(1<<2);
 540:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);
 542:	c2 9a       	sbi	0x18, 2	; 24
	MCUCSR |= (1 << ISC2);
 544:	84 b7       	in	r24, 0x34	; 52
 546:	80 64       	ori	r24, 0x40	; 64
 548:	84 bf       	out	0x34, r24	; 52
	GICR = (1 << INT2);
 54a:	80 e2       	ldi	r24, 0x20	; 32
 54c:	8b bf       	out	0x3b, r24	; 59
	sei();
 54e:	78 94       	sei
 550:	08 95       	ret

00000552 <usart_init_trans>:
}

void usart_init_trans (void)
{
	UCSRB = (1<<TXEN);
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<< UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 556:	86 e8       	ldi	r24, 0x86	; 134
 558:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
 55a:	83 e3       	ldi	r24, 0x33	; 51
 55c:	89 b9       	out	0x09, r24	; 9
 55e:	08 95       	ret

00000560 <usart_send>:
}

void usart_send (unsigned char ch)
{
	while (! (UCSRA & (1<<UDRE)));
 560:	5d 9b       	sbis	0x0b, 5	; 11
 562:	fe cf       	rjmp	.-4      	; 0x560 <usart_send>
	UDR = ch;
 564:	8c b9       	out	0x0c, r24	; 12
 566:	08 95       	ret

00000568 <password_match>:
}

bool password_match(unsigned char * passwords,unsigned char* password){
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
	bool match = false;
	

	for (char i = 0; i < password_count; i++){
 56e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <password_count>
 572:	31 11       	cpse	r19, r1
 574:	0b c0       	rjmp	.+22     	; 0x58c <password_match+0x24>
	while (! (UCSRA & (1<<UDRE)));
	UDR = ch;
}

bool password_match(unsigned char * passwords,unsigned char* password){
	bool match = false;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	1e c0       	rjmp	.+60     	; 0x5b6 <password_match+0x4e>

	for (char i = 0; i < password_count; i++){

		bool equal = true;
		for (char j = 0; j < 4 ; j++)
		if (passwords[i*4+j] != password[j]){
 57a:	9d 91       	ld	r25, X+
 57c:	81 91       	ld	r24, Z+
 57e:	98 13       	cpse	r25, r24
 580:	15 c0       	rjmp	.+42     	; 0x5ac <password_match+0x44>
	

	for (char i = 0; i < password_count; i++){

		bool equal = true;
		for (char j = 0; j < 4 ; j++)
 582:	e4 17       	cp	r30, r20
 584:	f5 07       	cpc	r31, r21
 586:	c9 f7       	brne	.-14     	; 0x57a <password_match+0x12>
			equal = false;
			break;
		}

		if (equal){
			match = true;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	15 c0       	rjmp	.+42     	; 0x5b6 <password_match+0x4e>

	for (char i = 0; i < password_count; i++){

		bool equal = true;
		for (char j = 0; j < 4 ; j++)
		if (passwords[i*4+j] != password[j]){
 58c:	fb 01       	movw	r30, r22
 58e:	10 81       	ld	r17, Z
 590:	c8 2f       	mov	r28, r24
 592:	d9 2f       	mov	r29, r25
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	ab 01       	movw	r20, r22
 598:	4c 5f       	subi	r20, 0xFC	; 252
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	88 81       	ld	r24, Y
 59e:	81 13       	cpse	r24, r17
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <password_match+0x44>
 5a2:	de 01       	movw	r26, r28
 5a4:	11 96       	adiw	r26, 0x01	; 1
 5a6:	fb 01       	movw	r30, r22
 5a8:	31 96       	adiw	r30, 0x01	; 1
 5aa:	e7 cf       	rjmp	.-50     	; 0x57a <password_match+0x12>

bool password_match(unsigned char * passwords,unsigned char* password){
	bool match = false;
	

	for (char i = 0; i < password_count; i++){
 5ac:	2f 5f       	subi	r18, 0xFF	; 255
 5ae:	24 96       	adiw	r28, 0x04	; 4
 5b0:	23 13       	cpse	r18, r19
 5b2:	f4 cf       	rjmp	.-24     	; 0x59c <password_match+0x34>
	while (! (UCSRA & (1<<UDRE)));
	UDR = ch;
}

bool password_match(unsigned char * passwords,unsigned char* password){
	bool match = false;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
			break;

		}
	}
	return match;
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	08 95       	ret

000005be <wrong_password>:

void wrong_password(){
	lcd_command(0xC0);
 5be:	80 ec       	ldi	r24, 0xC0	; 192
 5c0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("WRONG PASSWORD ");
 5c4:	83 e8       	ldi	r24, 0x83	; 131
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	lcd_data(tries+'1');
 5cc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tries>
 5d0:	8f 5c       	subi	r24, 0xCF	; 207
 5d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
	if(++tries == 1){
 5d6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tries>
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tries>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	51 f5       	brne	.+84     	; 0x638 <wrong_password+0x7a>
		tries = 0;
 5e4:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <tries>
		
		
		LED_DDR |= (1<<LED_PIN_NUM);
 5e8:	8d 9a       	sbi	0x11, 5	; 17
		
		
		DAC_DDR |= 0b11111011;
 5ea:	87 b3       	in	r24, 0x17	; 23
 5ec:	8b 6f       	ori	r24, 0xFB	; 251
 5ee:	87 bb       	out	0x17, r24	; 23
		ADCSRA= 0x83;
 5f0:	83 e8       	ldi	r24, 0x83	; 131
 5f2:	86 b9       	out	0x06, r24	; 6
		ADMUX= 0x60;
 5f4:	80 e6       	ldi	r24, 0x60	; 96
 5f6:	87 b9       	out	0x07, r24	; 7
		
		DAC_lone_DDR |= (1<<DAC_lone_PIN_NUM);
 5f8:	8a 9a       	sbi	0x11, 2	; 17
 5fa:	8a e0       	ldi	r24, 0x0A	; 10
 5fc:	90 e0       	ldi	r25, 0x00	; 0
		
		//data will be left-justified
		for (int i = 0; i<10 ; i++){
			LED_PORT |= (1<<LED_PIN_NUM);
 5fe:	95 9a       	sbi	0x12, 5	; 18
 600:	e7 ea       	ldi	r30, 0xA7	; 167
 602:	f1 e6       	ldi	r31, 0x61	; 97
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <wrong_password+0x46>
 608:	00 c0       	rjmp	.+0      	; 0x60a <wrong_password+0x4c>
 60a:	00 00       	nop
			_delay_ms(100);
			
			ADCSRA|=(1<<ADSC); //start conversion
 60c:	36 9a       	sbi	0x06, 6	; 6
			while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 60e:	34 9b       	sbis	0x06, 4	; 6
 610:	fe cf       	rjmp	.-4      	; 0x60e <wrong_password+0x50>
			char garbage = ADCL;
 612:	24 b1       	in	r18, 0x04	; 4
			char temp = ADCH; // send data to dac
 614:	25 b1       	in	r18, 0x05	; 5
			
			DAC_PORT = temp;
 616:	28 bb       	out	0x18, r18	; 24
			
			
			
			if((temp & (1<<DAC_lone_PIN_NUM)) != 0)
 618:	22 ff       	sbrs	r18, 2
 61a:	02 c0       	rjmp	.+4      	; 0x620 <wrong_password+0x62>
			DAC_lone_PORT |= (1<<DAC_lone_PIN_NUM);
 61c:	92 9a       	sbi	0x12, 2	; 18
 61e:	01 c0       	rjmp	.+2      	; 0x622 <wrong_password+0x64>
			else
			DAC_lone_PORT &= ~(1<<DAC_lone_PIN_NUM);
 620:	92 98       	cbi	0x12, 2	; 18
			
			LED_PORT &= ~(1<<LED_PIN_NUM);
 622:	95 98       	cbi	0x12, 5	; 18
 624:	e7 ea       	ldi	r30, 0xA7	; 167
 626:	f1 e6       	ldi	r31, 0x61	; 97
 628:	31 97       	sbiw	r30, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <wrong_password+0x6a>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <wrong_password+0x70>
 62e:	00 00       	nop
 630:	01 97       	sbiw	r24, 0x01	; 1
		ADMUX= 0x60;
		
		DAC_lone_DDR |= (1<<DAC_lone_PIN_NUM);
		
		//data will be left-justified
		for (int i = 0; i<10 ; i++){
 632:	29 f7       	brne	.-54     	; 0x5fe <wrong_password+0x40>
			DAC_lone_PORT &= ~(1<<DAC_lone_PIN_NUM);
			
			LED_PORT &= ~(1<<LED_PIN_NUM);
			_delay_ms(100);
		}
		DAC_PORT = 0;
 634:	18 ba       	out	0x18, r1	; 24
 636:	09 c0       	rjmp	.+18     	; 0x64a <wrong_password+0x8c>
 638:	ff e3       	ldi	r31, 0x3F	; 63
 63a:	2d e0       	ldi	r18, 0x0D	; 13
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	f1 50       	subi	r31, 0x01	; 1
 640:	20 40       	sbci	r18, 0x00	; 0
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <wrong_password+0x80>
 646:	00 c0       	rjmp	.+0      	; 0x648 <wrong_password+0x8a>
 648:	00 00       	nop

	}
	else
	_delay_ms(1000);
	lcd_command(0xC0);
 64a:	80 ec       	ldi	r24, 0xC0	; 192
 64c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print(">               ");
 650:	83 e9       	ldi	r24, 0x93	; 147
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	lcd_command(0xC1);
 658:	81 ec       	ldi	r24, 0xC1	; 193
 65a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 65e:	08 95       	ret

00000660 <print_menu>:

}
void print_menu(){
	clear_and_go_home();
 660:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
	lcd_print("1-change 2-show");
 664:	84 ea       	ldi	r24, 0xA4	; 164
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	lcd_command(0xC0);
 66c:	80 ec       	ldi	r24, 0xC0	; 192
 66e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("3-add 4-exit");
 672:	84 eb       	ldi	r24, 0xB4	; 180
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
 67a:	08 95       	ret

0000067c <main_app>:
}

void main_app(unsigned char * password){
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	8c 01       	movw	r16, r24
	lcd_command(0x01);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0C);
 692:	8c e0       	ldi	r24, 0x0C	; 12
 694:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("Welcome");
 698:	81 ec       	ldi	r24, 0xC1	; 193
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
 6a0:	e8 01       	movw	r28, r16
 6a2:	0c 5f       	subi	r16, 0xFC	; 252
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for (char i=0;i<4;i++)
	usart_send(password[i]);
 6a6:	89 91       	ld	r24, Y+
 6a8:	0e 94 b0 02 	call	0x560	; 0x560 <usart_send>
	lcd_command(0x01);
	lcd_command(0x02);
	lcd_command(0x0C);
	lcd_print("Welcome");
	
	for (char i=0;i<4;i++)
 6ac:	c0 17       	cp	r28, r16
 6ae:	d1 07       	cpc	r29, r17
 6b0:	d1 f7       	brne	.-12     	; 0x6a6 <main_app+0x2a>
	usart_send(password[i]);
	
	//_delay_ms(1200);
	lcd_command(0x01);
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>

	print_menu();
 6be:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <get_password>:
	static unsigned char password[4];
	static unsigned char count = 0;
	
	

	if(count<4 && out != '*' && out !='#'){
 6cc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <count.2022>
 6d0:	94 30       	cpi	r25, 0x04	; 4
 6d2:	90 f4       	brcc	.+36     	; 0x6f8 <get_password+0x2c>
 6d4:	8a 32       	cpi	r24, 0x2A	; 42
 6d6:	09 f4       	brne	.+2      	; 0x6da <get_password+0xe>
 6d8:	4b c0       	rjmp	.+150    	; 0x770 <get_password+0xa4>
 6da:	83 32       	cpi	r24, 0x23	; 35
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <get_password+0x14>
 6de:	44 c0       	rjmp	.+136    	; 0x768 <get_password+0x9c>
		password[count] = out ;
 6e0:	e9 2f       	mov	r30, r25
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	e3 5a       	subi	r30, 0xA3	; 163
 6e6:	fe 4f       	sbci	r31, 0xFE	; 254
 6e8:	80 83       	st	Z, r24
		count++;
 6ea:	9f 5f       	subi	r25, 0xFF	; 255
 6ec:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <count.2022>
		lcd_data(out);
 6f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
			wrong_password();
			count = 0;
		}
	}
	
	return false;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
	

	if(count<4 && out != '*' && out !='#'){
		password[count] = out ;
		count++;
		lcd_data(out);
 6f6:	08 95       	ret
	}
	else if (count>0 && out == '#'){
 6f8:	99 23       	and	r25, r25
 6fa:	81 f1       	breq	.+96     	; 0x75c <get_password+0x90>
 6fc:	83 32       	cpi	r24, 0x23	; 35
 6fe:	91 f4       	brne	.+36     	; 0x724 <get_password+0x58>
		lcd_command(0xC0+count);
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	89 0f       	add	r24, r25
 704:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_data(' ');
 708:	80 e2       	ldi	r24, 0x20	; 32
 70a:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		count--;
 70e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <count.2022>
 712:	9f ef       	ldi	r25, 0xFF	; 255
 714:	98 0f       	add	r25, r24
 716:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <count.2022>
		lcd_command(0xC1+count);
 71a:	80 54       	subi	r24, 0x40	; 64
 71c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			wrong_password();
			count = 0;
		}
	}
	
	return false;
 720:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (count>0 && out == '#'){
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
 722:	08 95       	ret
	}
	else if(count == 4 && out == '*'){
 724:	94 30       	cpi	r25, 0x04	; 4
 726:	e1 f4       	brne	.+56     	; 0x760 <get_password+0x94>
 728:	8a 32       	cpi	r24, 0x2A	; 42
 72a:	e1 f4       	brne	.+56     	; 0x764 <get_password+0x98>
		bool match = password_match(passwords,password);
 72c:	6d e5       	ldi	r22, 0x5D	; 93
 72e:	71 e0       	ldi	r23, 0x01	; 1
 730:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <passwords>
 734:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <passwords+0x1>
 738:	0e 94 b4 02 	call	0x568	; 0x568 <password_match>
		if(match){
 73c:	88 23       	and	r24, r24
 73e:	41 f0       	breq	.+16     	; 0x750 <get_password+0x84>
			main_app(password);
 740:	8d e5       	ldi	r24, 0x5D	; 93
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 3e 03 	call	0x67c	; 0x67c <main_app>
			count = 0;
 748:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <count.2022>
			return true;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	08 95       	ret
		}
		
		else{
			wrong_password();
 750:	0e 94 df 02 	call	0x5be	; 0x5be <wrong_password>
			count = 0;
 754:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <count.2022>
		}
	}
	
	return false;
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	08 95       	ret
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	08 95       	ret
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret
	if(count<4 && out != '*' && out !='#'){
		password[count] = out ;
		count++;
		lcd_data(out);
	}
	else if (count>0 && out == '#'){
 768:	91 11       	cpse	r25, r1
 76a:	ca cf       	rjmp	.-108    	; 0x700 <get_password+0x34>
			wrong_password();
			count = 0;
		}
	}
	
	return false;
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
	}
	else if(count == 4 && out == '*'){
 770:	94 30       	cpi	r25, 0x04	; 4
 772:	e1 f2       	breq	.-72     	; 0x72c <get_password+0x60>
			wrong_password();
			count = 0;
		}
	}
	
	return false;
 774:	80 e0       	ldi	r24, 0x00	; 0
}
 776:	08 95       	ret

00000778 <change>:
bool change(char out){
	static unsigned char index = '-';
	static unsigned char password[4];
	static unsigned char count = 0;

	if(index == '-'){
 778:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <index.2027>
 77c:	9d 32       	cpi	r25, 0x2D	; 45
 77e:	99 f4       	brne	.+38     	; 0x7a6 <change+0x2e>
		
		index = out;
 780:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <index.2027>

		clear_and_go_home();
 784:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>

		lcd_print("enter new one:");
 788:	89 ec       	ldi	r24, 0xC9	; 201
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
		lcd_command(0xC0);
 790:	80 ec       	ldi	r24, 0xC0	; 192
 792:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_command(0x0F);
 796:	8f e0       	ldi	r24, 0x0F	; 15
 798:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_data('>');
 79c:	8e e3       	ldi	r24, 0x3E	; 62
 79e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		return true;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	08 95       	ret
	}

	

	if(count<4 && out != '*' && out !='#'){
 7a6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <count.2029>
 7aa:	e4 30       	cpi	r30, 0x04	; 4
 7ac:	90 f4       	brcc	.+36     	; 0x7d2 <change+0x5a>
 7ae:	8a 32       	cpi	r24, 0x2A	; 42
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <change+0x3c>
 7b2:	51 c0       	rjmp	.+162    	; 0x856 <change+0xde>
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	09 f4       	brne	.+2      	; 0x7ba <change+0x42>
 7b8:	4a c0       	rjmp	.+148    	; 0x84e <change+0xd6>
		password[count++] = out ;
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	9e 0f       	add	r25, r30
 7be:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <count.2029>
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e8 5a       	subi	r30, 0xA8	; 168
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	80 83       	st	Z, r24
		lcd_data(out);
 7ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 7ce:	81 e0       	ldi	r24, 0x01	; 1

	

	if(count<4 && out != '*' && out !='#'){
		password[count++] = out ;
		lcd_data(out);
 7d0:	08 95       	ret
	}
	else if (count>0 && out == '#'){
 7d2:	ee 23       	and	r30, r30
 7d4:	b1 f1       	breq	.+108    	; 0x842 <change+0xca>
 7d6:	83 32       	cpi	r24, 0x23	; 35
 7d8:	91 f4       	brne	.+36     	; 0x7fe <change+0x86>
		lcd_command(0xC0+count);
 7da:	80 ec       	ldi	r24, 0xC0	; 192
 7dc:	8e 0f       	add	r24, r30
 7de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_data(' ');
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		count--;
 7e8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <count.2029>
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	98 0f       	add	r25, r24
 7f0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <count.2029>
		lcd_command(0xC1+count);
 7f4:	80 54       	subi	r24, 0x40	; 64
 7f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (count>0 && out == '#'){
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
 7fc:	08 95       	ret
	}
	else if(count == 4 && out == '*'){
 7fe:	e4 30       	cpi	r30, 0x04	; 4
 800:	11 f5       	brne	.+68     	; 0x846 <change+0xce>
 802:	8a 32       	cpi	r24, 0x2A	; 42
 804:	11 f5       	brne	.+68     	; 0x84a <change+0xd2>
		eeprom_change_password(index-'0', password);
 806:	68 e5       	ldi	r22, 0x58	; 88
 808:	71 e0       	ldi	r23, 0x01	; 1
 80a:	80 ed       	ldi	r24, 0xD0	; 208
 80c:	89 0f       	add	r24, r25
 80e:	0e 94 14 02 	call	0x428	; 0x428 <eeprom_change_password>
		
		index = '-';
 812:	8d e2       	ldi	r24, 0x2D	; 45
 814:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <index.2027>
		free(passwords);
 818:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <passwords>
 81c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <passwords+0x1>
 820:	0e 94 7f 06 	call	0xcfe	; 0xcfe <free>
		password_count = eeprom_init(&passwords);
 824:	85 e6       	ldi	r24, 0x65	; 101
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 82c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <password_count>
		print_menu();
 830:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
		lcd_command(0x0C);//turn off cursor
 834:	8c e0       	ldi	r24, 0x0C	; 12
 836:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		count = 0;
 83a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <count.2029>
		return false;
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret
	}
	return true;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 95       	ret
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	08 95       	ret
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	08 95       	ret

	if(count<4 && out != '*' && out !='#'){
		password[count++] = out ;
		lcd_data(out);
	}
	else if (count>0 && out == '#'){
 84e:	e1 11       	cpse	r30, r1
 850:	c4 cf       	rjmp	.-120    	; 0x7da <change+0x62>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
	}
	else if(count == 4 && out == '*'){
 856:	e4 30       	cpi	r30, 0x04	; 4
 858:	b1 f2       	breq	.-84     	; 0x806 <change+0x8e>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 85a:	81 e0       	ldi	r24, 0x01	; 1
}
 85c:	08 95       	ret

0000085e <show_passwords>:

void show_passwords(){
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
	
	
	for (char i = 0; i < password_count; i++)
 864:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <password_count>
 868:	88 23       	and	r24, r24
 86a:	c1 f1       	breq	.+112    	; 0x8dc <__stack+0x7d>
 86c:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_data(passwords[i*4]);
 86e:	c1 2f       	mov	r28, r17
 870:	d0 e0       	ldi	r29, 0x00	; 0
 872:	cc 0f       	add	r28, r28
 874:	dd 1f       	adc	r29, r29
 876:	cc 0f       	add	r28, r28
 878:	dd 1f       	adc	r29, r29
 87a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <passwords>
 87e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <passwords+0x1>
 882:	ec 0f       	add	r30, r28
 884:	fd 1f       	adc	r31, r29
 886:	80 81       	ld	r24, Z
 888:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		lcd_data(passwords[i*4+1]);
 88c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <passwords>
 890:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <passwords+0x1>
 894:	ec 0f       	add	r30, r28
 896:	fd 1f       	adc	r31, r29
 898:	81 81       	ldd	r24, Z+1	; 0x01
 89a:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		lcd_data(passwords[i*4+2]);
 89e:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <passwords>
 8a2:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <passwords+0x1>
 8a6:	ec 0f       	add	r30, r28
 8a8:	fd 1f       	adc	r31, r29
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		lcd_data(passwords[i*4+3]);
 8b0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <passwords>
 8b4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <passwords+0x1>
 8b8:	c8 0f       	add	r28, r24
 8ba:	d9 1f       	adc	r29, r25
 8bc:	8b 81       	ldd	r24, Y+3	; 0x03
 8be:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		lcd_data(' ');
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		if(i == 2)
 8c8:	12 30       	cpi	r17, 0x02	; 2
 8ca:	19 f4       	brne	.+6      	; 0x8d2 <__stack+0x73>
		lcd_command(0xC0);
 8cc:	80 ec       	ldi	r24, 0xC0	; 192
 8ce:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}

void show_passwords(){
	
	
	for (char i = 0; i < password_count; i++)
 8d2:	1f 5f       	subi	r17, 0xFF	; 255
 8d4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <password_count>
 8d8:	18 17       	cp	r17, r24
 8da:	48 f2       	brcs	.-110    	; 0x86e <__stack+0xf>
 8dc:	2f e7       	ldi	r18, 0x7F	; 127
 8de:	8a e1       	ldi	r24, 0x1A	; 26
 8e0:	96 e0       	ldi	r25, 0x06	; 6
 8e2:	21 50       	subi	r18, 0x01	; 1
 8e4:	80 40       	sbci	r24, 0x00	; 0
 8e6:	90 40       	sbci	r25, 0x00	; 0
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <__stack+0x8d>
 8ec:	00 00       	nop
		lcd_data(' ');
		if(i == 2)
		lcd_command(0xC0);
	}
	_delay_ms(2000);
	print_menu();
 8ee:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
}
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
 8f8:	08 95       	ret

000008fa <add_password>:

bool add_password(char out){
	static unsigned char password[4];
	static unsigned char count = 0;

	if(count<4 && out != '*' && out !='#'){
 8fa:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <count.2040>
 8fe:	e4 30       	cpi	r30, 0x04	; 4
 900:	90 f4       	brcc	.+36     	; 0x926 <add_password+0x2c>
 902:	8a 32       	cpi	r24, 0x2A	; 42
 904:	09 f4       	brne	.+2      	; 0x908 <add_password+0xe>
 906:	4c c0       	rjmp	.+152    	; 0x9a0 <add_password+0xa6>
 908:	83 32       	cpi	r24, 0x23	; 35
 90a:	09 f4       	brne	.+2      	; 0x90e <add_password+0x14>
 90c:	45 c0       	rjmp	.+138    	; 0x998 <add_password+0x9e>
		password[count++] = out ;
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	9e 0f       	add	r25, r30
 912:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <count.2040>
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	ed 5a       	subi	r30, 0xAD	; 173
 91a:	fe 4f       	sbci	r31, 0xFE	; 254
 91c:	80 83       	st	Z, r24
		lcd_data(out);
 91e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 922:	81 e0       	ldi	r24, 0x01	; 1
	static unsigned char password[4];
	static unsigned char count = 0;

	if(count<4 && out != '*' && out !='#'){
		password[count++] = out ;
		lcd_data(out);
 924:	08 95       	ret
	}
	else if (count>0 && out == '#'){
 926:	ee 23       	and	r30, r30
 928:	89 f1       	breq	.+98     	; 0x98c <add_password+0x92>
 92a:	83 32       	cpi	r24, 0x23	; 35
 92c:	91 f4       	brne	.+36     	; 0x952 <add_password+0x58>
		lcd_command(0xC0+count);
 92e:	80 ec       	ldi	r24, 0xC0	; 192
 930:	8e 0f       	add	r24, r30
 932:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		lcd_data(' ');
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
		count--;
 93c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <count.2040>
 940:	9f ef       	ldi	r25, 0xFF	; 255
 942:	98 0f       	add	r25, r24
 944:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <count.2040>
		lcd_command(0xC1+count);
 948:	80 54       	subi	r24, 0x40	; 64
 94a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 94e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (count>0 && out == '#'){
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
 950:	08 95       	ret
	}
	else if(count == 4 && out == '*'){
 952:	e4 30       	cpi	r30, 0x04	; 4
 954:	e9 f4       	brne	.+58     	; 0x990 <add_password+0x96>
 956:	8a 32       	cpi	r24, 0x2A	; 42
 958:	e9 f4       	brne	.+58     	; 0x994 <add_password+0x9a>
		eeprom_add_password(password);
 95a:	83 e5       	ldi	r24, 0x53	; 83
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <eeprom_add_password>
		
		free(passwords);
 962:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <passwords>
 966:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <passwords+0x1>
 96a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <free>
		password_count = eeprom_init(&passwords);//refresh password array
 96e:	85 e6       	ldi	r24, 0x65	; 101
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 976:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <password_count>
		print_menu();
 97a:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
		lcd_command(0x0C);//turn off cursor
 97e:	8c e0       	ldi	r24, 0x0C	; 12
 980:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		count = 0;
 984:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <count.2040>
		return false;
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	08 95       	ret
	}
	return true;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	08 95       	ret
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	08 95       	ret
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	08 95       	ret

	if(count<4 && out != '*' && out !='#'){
		password[count++] = out ;
		lcd_data(out);
	}
	else if (count>0 && out == '#'){
 998:	e1 11       	cpse	r30, r1
 99a:	c9 cf       	rjmp	.-110    	; 0x92e <add_password+0x34>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	08 95       	ret
		lcd_command(0xC0+count);
		lcd_data(' ');
		count--;
		lcd_command(0xC1+count);
	}
	else if(count == 4 && out == '*'){
 9a0:	e4 30       	cpi	r30, 0x04	; 4
 9a2:	d9 f2       	breq	.-74     	; 0x95a <add_password+0x60>
		print_menu();
		lcd_command(0x0C);//turn off cursor
		count = 0;
		return false;
	}
	return true;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
}
 9a6:	08 95       	ret

000009a8 <get_options>:

bool get_options(char out){
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	d8 2f       	mov	r29, r24

	static bool changing = false;
	static bool adding = false;
	
	
	if(changing){
 9ae:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <changing.2044>
 9b2:	cc 23       	and	r28, r28
 9b4:	29 f0       	breq	.+10     	; 0x9c0 <get_options+0x18>
		changing = change(out);
 9b6:	0e 94 bc 03 	call	0x778	; 0x778 <change>
 9ba:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <changing.2044>
 9be:	77 c0       	rjmp	.+238    	; 0xaae <get_options+0x106>
	}
	else if(adding){
 9c0:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <adding.2045>
 9c4:	cc 23       	and	r28, r28
 9c6:	29 f0       	breq	.+10     	; 0x9d2 <get_options+0x2a>
		
		adding = add_password(out);
 9c8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <add_password>
 9cc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adding.2045>
 9d0:	6e c0       	rjmp	.+220    	; 0xaae <get_options+0x106>
	}
	else{
		clear_and_go_home();
 9d2:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
		switch (out)
 9d6:	d3 33       	cpi	r29, 0x33	; 51
 9d8:	d1 f0       	breq	.+52     	; 0xa0e <get_options+0x66>
 9da:	28 f4       	brcc	.+10     	; 0x9e6 <get_options+0x3e>
 9dc:	d1 33       	cpi	r29, 0x31	; 49
 9de:	51 f0       	breq	.+20     	; 0x9f4 <get_options+0x4c>
 9e0:	d2 33       	cpi	r29, 0x32	; 50
 9e2:	89 f0       	breq	.+34     	; 0xa06 <get_options+0x5e>
 9e4:	61 c0       	rjmp	.+194    	; 0xaa8 <get_options+0x100>
 9e6:	d4 33       	cpi	r29, 0x34	; 52
 9e8:	09 f4       	brne	.+2      	; 0x9ec <get_options+0x44>
 9ea:	61 c0       	rjmp	.+194    	; 0xaae <get_options+0x106>
 9ec:	d6 33       	cpi	r29, 0x36	; 54
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <get_options+0x4a>
 9f0:	40 c0       	rjmp	.+128    	; 0xa72 <get_options+0xca>
 9f2:	5a c0       	rjmp	.+180    	; 0xaa8 <get_options+0x100>
		{
			case '1':{
				lcd_print("which one?");
 9f4:	88 ed       	ldi	r24, 0xD8	; 216
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
				changing = true;
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <changing.2044>
			default:
			print_menu();
			break;
		}
	}
	return true;
 a02:	c1 e0       	ldi	r28, 0x01	; 1
		{
			case '1':{
				lcd_print("which one?");
				changing = true;
			}
			break;
 a04:	54 c0       	rjmp	.+168    	; 0xaae <get_options+0x106>
			case '2':{
				show_passwords();
 a06:	0e 94 2f 04 	call	0x85e	; 0x85e <show_passwords>
			default:
			print_menu();
			break;
		}
	}
	return true;
 a0a:	c1 e0       	ldi	r28, 0x01	; 1
			}
			break;
			case '2':{
				show_passwords();
			}
			break;
 a0c:	50 c0       	rjmp	.+160    	; 0xaae <get_options+0x106>
			case '3':{
				if(password_count>=6){
 a0e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <password_count>
 a12:	86 30       	cpi	r24, 0x06	; 6
 a14:	d0 f0       	brcs	.+52     	; 0xa4a <get_options+0xa2>
					clear_and_go_home();
 a16:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
					lcd_print("can't add more");
 a1a:	83 ee       	ldi	r24, 0xE3	; 227
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
					lcd_command(0xC0);
 a22:	80 ec       	ldi	r24, 0xC0	; 192
 a24:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					lcd_print("passwords");
 a28:	82 ef       	ldi	r24, 0xF2	; 242
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
 a30:	2f ed       	ldi	r18, 0xDF	; 223
 a32:	83 e9       	ldi	r24, 0x93	; 147
 a34:	94 e0       	ldi	r25, 0x04	; 4
 a36:	21 50       	subi	r18, 0x01	; 1
 a38:	80 40       	sbci	r24, 0x00	; 0
 a3a:	90 40       	sbci	r25, 0x00	; 0
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <get_options+0x8e>
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <get_options+0x98>
 a40:	00 00       	nop
					_delay_ms(1500);
					print_menu();
 a42:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
			default:
			print_menu();
			break;
		}
	}
	return true;
 a46:	c1 e0       	ldi	r28, 0x01	; 1
					lcd_print("can't add more");
					lcd_command(0xC0);
					lcd_print("passwords");
					_delay_ms(1500);
					print_menu();
					break;
 a48:	32 c0       	rjmp	.+100    	; 0xaae <get_options+0x106>
				}
				adding = true;
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adding.2045>
				clear_and_go_home();
 a50:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
				lcd_print("enter new pass:");
 a54:	8c ef       	ldi	r24, 0xFC	; 252
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
				lcd_command(0xC0);
 a5c:	80 ec       	ldi	r24, 0xC0	; 192
 a5e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
				lcd_data('>');
 a62:	8e e3       	ldi	r24, 0x3E	; 62
 a64:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
				lcd_command(0x0F);
 a68:	8f e0       	ldi	r24, 0x0F	; 15
 a6a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			default:
			print_menu();
			break;
		}
	}
	return true;
 a6e:	c1 e0       	ldi	r28, 0x01	; 1
				lcd_command(0xC0);
				lcd_data('>');
				lcd_command(0x0F);
				
			}
			break;
 a70:	1e c0       	rjmp	.+60     	; 0xaae <get_options+0x106>
			case '4':{
				return false;
			}
			break;
			case '6':{
				clear_and_go_home();
 a72:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
				lcd_print("reseting eeprom");
 a76:	8c e0       	ldi	r24, 0x0C	; 12
 a78:	91 e0       	ldi	r25, 0x01	; 1
 a7a:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
				eeprom_first_time_boot();
 a7e:	0e 94 37 01 	call	0x26e	; 0x26e <eeprom_first_time_boot>
				password_count = eeprom_init(&passwords);
 a82:	85 e6       	ldi	r24, 0x65	; 101
 a84:	91 e0       	ldi	r25, 0x01	; 1
 a86:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 a8a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <password_count>
 a8e:	2f e3       	ldi	r18, 0x3F	; 63
 a90:	8d e0       	ldi	r24, 0x0D	; 13
 a92:	93 e0       	ldi	r25, 0x03	; 3
 a94:	21 50       	subi	r18, 0x01	; 1
 a96:	80 40       	sbci	r24, 0x00	; 0
 a98:	90 40       	sbci	r25, 0x00	; 0
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <get_options+0xec>
 a9c:	00 c0       	rjmp	.+0      	; 0xa9e <get_options+0xf6>
 a9e:	00 00       	nop
				_delay_ms(1000);
				print_menu();
 aa0:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
			default:
			print_menu();
			break;
		}
	}
	return true;
 aa4:	c1 e0       	ldi	r28, 0x01	; 1
				eeprom_first_time_boot();
				password_count = eeprom_init(&passwords);
				_delay_ms(1000);
				print_menu();
			}
			break;
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <get_options+0x106>
			default:
			print_menu();
 aa8:	0e 94 30 03 	call	0x660	; 0x660 <print_menu>
			break;
		}
	}
	return true;
 aac:	c1 e0       	ldi	r28, 0x01	; 1
}
 aae:	8c 2f       	mov	r24, r28
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <__vector_3>:


ISR(INT2_vect){
 ab6:	1f 92       	push	r1
 ab8:	0f 92       	push	r0
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
	
	if(names_showing){
 ad8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <names_showing>
 adc:	88 23       	and	r24, r24
 ade:	19 f0       	breq	.+6      	; 0xae6 <__vector_3+0x30>
		names_showing=false;
 ae0:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <names_showing>
		return;
 ae4:	1a c0       	rjmp	.+52     	; 0xb1a <__vector_3+0x64>
	}

	char out = keypad_scan();
 ae6:	0e 94 b0 00 	call	0x160	; 0x160 <keypad_scan>

	static bool entered = false;

	if(!entered){
 aea:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
 aee:	91 11       	cpse	r25, r1
 af0:	05 c0       	rjmp	.+10     	; 0xafc <__vector_3+0x46>
		
		entered = get_password(out);
 af2:	0e 94 66 03 	call	0x6cc	; 0x6cc <get_password>
 af6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 afa:	0d c0       	rjmp	.+26     	; 0xb16 <__vector_3+0x60>
	}
	else{
		entered = get_options(out);
 afc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_options>
 b00:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
		tries = 0;
 b04:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <tries>
		if(!entered){
 b08:	81 11       	cpse	r24, r1
 b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__vector_3+0x60>
			password_text();
 b0c:	0e 94 92 02 	call	0x524	; 0x524 <password_text>
			usart_send('-');
 b10:	8d e2       	ldi	r24, 0x2D	; 45
 b12:	0e 94 b0 02 	call	0x560	; 0x560 <usart_send>
		}
	}
	
	keypad_init();
 b16:	0e 94 a7 00 	call	0x14e	; 0x14e <keypad_init>
}
 b1a:	ff 91       	pop	r31
 b1c:	ef 91       	pop	r30
 b1e:	bf 91       	pop	r27
 b20:	af 91       	pop	r26
 b22:	9f 91       	pop	r25
 b24:	8f 91       	pop	r24
 b26:	7f 91       	pop	r23
 b28:	6f 91       	pop	r22
 b2a:	5f 91       	pop	r21
 b2c:	4f 91       	pop	r20
 b2e:	3f 91       	pop	r19
 b30:	2f 91       	pop	r18
 b32:	0f 90       	pop	r0
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	0f 90       	pop	r0
 b38:	1f 90       	pop	r1
 b3a:	18 95       	reti

00000b3c <show_names>:

void show_names(){
 b3c:	cf 93       	push	r28
	names_showing = true;
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <names_showing>
	
	lcd_command(0x90);
 b44:	80 e9       	ldi	r24, 0x90	; 144
 b46:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("Shafagh Sepehr   40125203");
 b4a:	8c e1       	ldi	r24, 0x1C	; 28
 b4c:	91 e0       	ldi	r25, 0x01	; 1
 b4e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	lcd_command(0xD0);
 b52:	80 ed       	ldi	r24, 0xD0	; 208
 b54:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("Kourosh Jamshidi 40120523");
 b58:	86 e3       	ldi	r24, 0x36	; 54
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	char c = 40;
	while(c-- && names_showing){
 b60:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <names_showing>
 b64:	81 11       	cpse	r24, r1
 b66:	13 c0       	rjmp	.+38     	; 0xb8e <show_names+0x52>
 b68:	0f c0       	rjmp	.+30     	; 0xb88 <show_names+0x4c>
 b6a:	8b e7       	ldi	r24, 0x7B	; 123
 b6c:	92 e9       	ldi	r25, 0x92	; 146
 b6e:	01 97       	sbiw	r24, 0x01	; 1
 b70:	f1 f7       	brne	.-4      	; 0xb6e <show_names+0x32>
 b72:	00 c0       	rjmp	.+0      	; 0xb74 <show_names+0x38>
 b74:	00 00       	nop
		_delay_ms(150);
		lcd_command(0x18);
 b76:	88 e1       	ldi	r24, 0x18	; 24
 b78:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 b7c:	c1 50       	subi	r28, 0x01	; 1
	lcd_command(0x90);
	lcd_print("Shafagh Sepehr   40125203");
	lcd_command(0xD0);
	lcd_print("Kourosh Jamshidi 40120523");
	char c = 40;
	while(c-- && names_showing){
 b7e:	21 f0       	breq	.+8      	; 0xb88 <show_names+0x4c>
 b80:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <names_showing>
 b84:	81 11       	cpse	r24, r1
 b86:	f1 cf       	rjmp	.-30     	; 0xb6a <show_names+0x2e>
		_delay_ms(150);
		lcd_command(0x18);
	}
	clear_and_go_home();
 b88:	0e 94 a0 00 	call	0x140	; 0x140 <clear_and_go_home>
}
 b8c:	0b c0       	rjmp	.+22     	; 0xba4 <show_names+0x68>
 b8e:	8b e7       	ldi	r24, 0x7B	; 123
 b90:	92 e9       	ldi	r25, 0x92	; 146
 b92:	01 97       	sbiw	r24, 0x01	; 1
 b94:	f1 f7       	brne	.-4      	; 0xb92 <show_names+0x56>
 b96:	00 c0       	rjmp	.+0      	; 0xb98 <show_names+0x5c>
 b98:	00 00       	nop
	lcd_command(0xD0);
	lcd_print("Kourosh Jamshidi 40120523");
	char c = 40;
	while(c-- && names_showing){
		_delay_ms(150);
		lcd_command(0x18);
 b9a:	88 e1       	ldi	r24, 0x18	; 24
 b9c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 ba0:	c7 e2       	ldi	r28, 0x27	; 39
 ba2:	ee cf       	rjmp	.-36     	; 0xb80 <show_names+0x44>
	}
	clear_and_go_home();
}
 ba4:	cf 91       	pop	r28
 ba6:	08 95       	ret

00000ba8 <main>:


int main(void) {
	
	
	usart_init_trans();
 ba8:	0e 94 a9 02 	call	0x552	; 0x552 <usart_init_trans>
	lcd_init();
 bac:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
	
	
	keypad_init();
 bb0:	0e 94 a7 00 	call	0x14e	; 0x14e <keypad_init>
	password_count = eeprom_init(&passwords);
 bb4:	85 e6       	ldi	r24, 0x65	; 101
 bb6:	91 e0       	ldi	r25, 0x01	; 1
 bb8:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_init>
 bbc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <password_count>
	
	
	interrupt_init();
 bc0:	0e 94 a0 02 	call	0x540	; 0x540 <interrupt_init>
	show_names();
 bc4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <show_names>
	password_text();
 bc8:	0e 94 92 02 	call	0x524	; 0x524 <password_text>
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <main+0x24>

00000bce <malloc>:
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	91 05       	cpc	r25, r1
 bda:	10 f4       	brcc	.+4      	; 0xbe0 <malloc+0x12>
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 be4:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a0 e0       	ldi	r26, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	30 97       	sbiw	r30, 0x00	; 0
 bf2:	19 f1       	breq	.+70     	; 0xc3a <malloc+0x6c>
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	02 81       	ldd	r16, Z+2	; 0x02
 bfa:	13 81       	ldd	r17, Z+3	; 0x03
 bfc:	48 17       	cp	r20, r24
 bfe:	59 07       	cpc	r21, r25
 c00:	c8 f0       	brcs	.+50     	; 0xc34 <malloc+0x66>
 c02:	84 17       	cp	r24, r20
 c04:	95 07       	cpc	r25, r21
 c06:	69 f4       	brne	.+26     	; 0xc22 <malloc+0x54>
 c08:	10 97       	sbiw	r26, 0x00	; 0
 c0a:	31 f0       	breq	.+12     	; 0xc18 <malloc+0x4a>
 c0c:	12 96       	adiw	r26, 0x02	; 2
 c0e:	0c 93       	st	X, r16
 c10:	12 97       	sbiw	r26, 0x02	; 2
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	1c 93       	st	X, r17
 c16:	27 c0       	rjmp	.+78     	; 0xc66 <malloc+0x98>
 c18:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 c1c:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 c20:	22 c0       	rjmp	.+68     	; 0xc66 <malloc+0x98>
 c22:	21 15       	cp	r18, r1
 c24:	31 05       	cpc	r19, r1
 c26:	19 f0       	breq	.+6      	; 0xc2e <malloc+0x60>
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <malloc+0x66>
 c2e:	9a 01       	movw	r18, r20
 c30:	bd 01       	movw	r22, r26
 c32:	ef 01       	movw	r28, r30
 c34:	df 01       	movw	r26, r30
 c36:	f8 01       	movw	r30, r16
 c38:	db cf       	rjmp	.-74     	; 0xbf0 <malloc+0x22>
 c3a:	21 15       	cp	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	f9 f0       	breq	.+62     	; 0xc7e <malloc+0xb0>
 c40:	28 1b       	sub	r18, r24
 c42:	39 0b       	sbc	r19, r25
 c44:	24 30       	cpi	r18, 0x04	; 4
 c46:	31 05       	cpc	r19, r1
 c48:	80 f4       	brcc	.+32     	; 0xc6a <malloc+0x9c>
 c4a:	8a 81       	ldd	r24, Y+2	; 0x02
 c4c:	9b 81       	ldd	r25, Y+3	; 0x03
 c4e:	61 15       	cp	r22, r1
 c50:	71 05       	cpc	r23, r1
 c52:	21 f0       	breq	.+8      	; 0xc5c <malloc+0x8e>
 c54:	fb 01       	movw	r30, r22
 c56:	93 83       	std	Z+3, r25	; 0x03
 c58:	82 83       	std	Z+2, r24	; 0x02
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <malloc+0x96>
 c5c:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 c60:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 c64:	fe 01       	movw	r30, r28
 c66:	32 96       	adiw	r30, 0x02	; 2
 c68:	44 c0       	rjmp	.+136    	; 0xcf2 <malloc+0x124>
 c6a:	fe 01       	movw	r30, r28
 c6c:	e2 0f       	add	r30, r18
 c6e:	f3 1f       	adc	r31, r19
 c70:	81 93       	st	Z+, r24
 c72:	91 93       	st	Z+, r25
 c74:	22 50       	subi	r18, 0x02	; 2
 c76:	31 09       	sbc	r19, r1
 c78:	39 83       	std	Y+1, r19	; 0x01
 c7a:	28 83       	st	Y, r18
 c7c:	3a c0       	rjmp	.+116    	; 0xcf2 <malloc+0x124>
 c7e:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 c82:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 c86:	23 2b       	or	r18, r19
 c88:	41 f4       	brne	.+16     	; 0xc9a <malloc+0xcc>
 c8a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 c8e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 c92:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 c96:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 c9a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 c9e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 ca2:	21 15       	cp	r18, r1
 ca4:	31 05       	cpc	r19, r1
 ca6:	41 f4       	brne	.+16     	; 0xcb8 <malloc+0xea>
 ca8:	2d b7       	in	r18, 0x3d	; 61
 caa:	3e b7       	in	r19, 0x3e	; 62
 cac:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 cb0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 cb4:	24 1b       	sub	r18, r20
 cb6:	35 0b       	sbc	r19, r21
 cb8:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 cbc:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 cc0:	e2 17       	cp	r30, r18
 cc2:	f3 07       	cpc	r31, r19
 cc4:	a0 f4       	brcc	.+40     	; 0xcee <malloc+0x120>
 cc6:	2e 1b       	sub	r18, r30
 cc8:	3f 0b       	sbc	r19, r31
 cca:	28 17       	cp	r18, r24
 ccc:	39 07       	cpc	r19, r25
 cce:	78 f0       	brcs	.+30     	; 0xcee <malloc+0x120>
 cd0:	ac 01       	movw	r20, r24
 cd2:	4e 5f       	subi	r20, 0xFE	; 254
 cd4:	5f 4f       	sbci	r21, 0xFF	; 255
 cd6:	24 17       	cp	r18, r20
 cd8:	35 07       	cpc	r19, r21
 cda:	48 f0       	brcs	.+18     	; 0xcee <malloc+0x120>
 cdc:	4e 0f       	add	r20, r30
 cde:	5f 1f       	adc	r21, r31
 ce0:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 ce4:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 ce8:	81 93       	st	Z+, r24
 cea:	91 93       	st	Z+, r25
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <malloc+0x124>
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	cf 01       	movw	r24, r30
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <free>:
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	09 f4       	brne	.+2      	; 0xd08 <free+0xa>
 d06:	81 c0       	rjmp	.+258    	; 0xe0a <free+0x10c>
 d08:	fc 01       	movw	r30, r24
 d0a:	32 97       	sbiw	r30, 0x02	; 2
 d0c:	13 82       	std	Z+3, r1	; 0x03
 d0e:	12 82       	std	Z+2, r1	; 0x02
 d10:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 d14:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 d18:	10 97       	sbiw	r26, 0x00	; 0
 d1a:	81 f4       	brne	.+32     	; 0xd3c <free+0x3e>
 d1c:	20 81       	ld	r18, Z
 d1e:	31 81       	ldd	r19, Z+1	; 0x01
 d20:	82 0f       	add	r24, r18
 d22:	93 1f       	adc	r25, r19
 d24:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 d28:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 d2c:	28 17       	cp	r18, r24
 d2e:	39 07       	cpc	r19, r25
 d30:	51 f5       	brne	.+84     	; 0xd86 <free+0x88>
 d32:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 d36:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 d3a:	67 c0       	rjmp	.+206    	; 0xe0a <free+0x10c>
 d3c:	ed 01       	movw	r28, r26
 d3e:	20 e0       	ldi	r18, 0x00	; 0
 d40:	30 e0       	ldi	r19, 0x00	; 0
 d42:	ce 17       	cp	r28, r30
 d44:	df 07       	cpc	r29, r31
 d46:	40 f4       	brcc	.+16     	; 0xd58 <free+0x5a>
 d48:	4a 81       	ldd	r20, Y+2	; 0x02
 d4a:	5b 81       	ldd	r21, Y+3	; 0x03
 d4c:	9e 01       	movw	r18, r28
 d4e:	41 15       	cp	r20, r1
 d50:	51 05       	cpc	r21, r1
 d52:	f1 f0       	breq	.+60     	; 0xd90 <free+0x92>
 d54:	ea 01       	movw	r28, r20
 d56:	f5 cf       	rjmp	.-22     	; 0xd42 <free+0x44>
 d58:	d3 83       	std	Z+3, r29	; 0x03
 d5a:	c2 83       	std	Z+2, r28	; 0x02
 d5c:	40 81       	ld	r20, Z
 d5e:	51 81       	ldd	r21, Z+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	c8 17       	cp	r28, r24
 d66:	d9 07       	cpc	r29, r25
 d68:	59 f4       	brne	.+22     	; 0xd80 <free+0x82>
 d6a:	88 81       	ld	r24, Y
 d6c:	99 81       	ldd	r25, Y+1	; 0x01
 d6e:	84 0f       	add	r24, r20
 d70:	95 1f       	adc	r25, r21
 d72:	02 96       	adiw	r24, 0x02	; 2
 d74:	91 83       	std	Z+1, r25	; 0x01
 d76:	80 83       	st	Z, r24
 d78:	8a 81       	ldd	r24, Y+2	; 0x02
 d7a:	9b 81       	ldd	r25, Y+3	; 0x03
 d7c:	93 83       	std	Z+3, r25	; 0x03
 d7e:	82 83       	std	Z+2, r24	; 0x02
 d80:	21 15       	cp	r18, r1
 d82:	31 05       	cpc	r19, r1
 d84:	29 f4       	brne	.+10     	; 0xd90 <free+0x92>
 d86:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 d8a:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 d8e:	3d c0       	rjmp	.+122    	; 0xe0a <free+0x10c>
 d90:	e9 01       	movw	r28, r18
 d92:	fb 83       	std	Y+3, r31	; 0x03
 d94:	ea 83       	std	Y+2, r30	; 0x02
 d96:	49 91       	ld	r20, Y+
 d98:	59 91       	ld	r21, Y+
 d9a:	c4 0f       	add	r28, r20
 d9c:	d5 1f       	adc	r29, r21
 d9e:	ec 17       	cp	r30, r28
 da0:	fd 07       	cpc	r31, r29
 da2:	61 f4       	brne	.+24     	; 0xdbc <free+0xbe>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	e9 01       	movw	r28, r18
 db0:	99 83       	std	Y+1, r25	; 0x01
 db2:	88 83       	st	Y, r24
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	9b 83       	std	Y+3, r25	; 0x03
 dba:	8a 83       	std	Y+2, r24	; 0x02
 dbc:	e0 e0       	ldi	r30, 0x00	; 0
 dbe:	f0 e0       	ldi	r31, 0x00	; 0
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	13 97       	sbiw	r26, 0x03	; 3
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	19 f0       	breq	.+6      	; 0xdd2 <free+0xd4>
 dcc:	fd 01       	movw	r30, r26
 dce:	dc 01       	movw	r26, r24
 dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <free+0xc2>
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	11 97       	sbiw	r26, 0x01	; 1
 dd8:	9d 01       	movw	r18, r26
 dda:	2e 5f       	subi	r18, 0xFE	; 254
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 de6:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x10c>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x100>
 df4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 df8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x104>
 dfe:	13 82       	std	Z+3, r1	; 0x03
 e00:	12 82       	std	Z+2, r1	; 0x02
 e02:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 e06:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
