
receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d2  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d5  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  7a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
#define LCD_RW 1 //LCD RW
#define LCD_RS 2 //LCD RS

void lcd_command( unsigned char cmnd )
{
	LCD_DPRT = cmnd; //send cmnd to data port
  82:	8b bb       	out	0x1b, r24	; 27
	LCD_CPRT &= ~ (1<<LCD_RS); //RS = 0 for command
  84:	aa 98       	cbi	0x15, 2	; 21
	LCD_CPRT &= ~ (1<<LCD_RW); //RW = 0 for write
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  88:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ef       	ldi	r24, 0xF3	; 243
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_command+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_command+0x12>
  94:	00 00       	nop
	_delay_us(2000); //wait to make enable wide
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  96:	a8 98       	cbi	0x15, 0	; 21
  98:	83 ef       	ldi	r24, 0xF3	; 243
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_command+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_data>:
	_delay_us(2000); //wait to make enable wide
}

void lcd_data( unsigned char data )
{
	LCD_DPRT = data; //send data to data port
  a6:	8b bb       	out	0x1b, r24	; 27
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
  a8:	aa 9a       	sbi	0x15, 2	; 21
	LCD_CPRT &= ~ (1<<LCD_RW); //RW = 0 for write
  aa:	a9 98       	cbi	0x15, 1	; 21
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  ac:	a8 9a       	sbi	0x15, 0	; 21
  ae:	83 ef       	ldi	r24, 0xF3	; 243
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_data+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_data+0x12>
  b8:	00 00       	nop
	_delay_us(2000); //wait to make enable wide
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  ba:	a8 98       	cbi	0x15, 0	; 21
  bc:	83 ef       	ldi	r24, 0xF3	; 243
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_data+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_data+0x20>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <lcd_init>:
	_delay_us(2000); //wait to make enable wide
}

void lcd_init()
{
	LCD_DDDR = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	LCD_CDDR = 0xFF;
  ce:	84 bb       	out	0x14, r24	; 20
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
  d0:	a8 98       	cbi	0x15, 0	; 21
  d2:	83 ef       	ldi	r24, 0xF3	; 243
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_init+0xc>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_init+0x12>
  dc:	00 00       	nop
	_delay_us(2000); //wait for init
	lcd_command(0x38); //init. LCD 2 line, 5 Ã— 7 matrix
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x0C); //display on, cursor off
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x01); //clear LCD
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
  f0:	83 ef       	ldi	r24, 0xF3	; 243
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_init+0x2a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_init+0x30>
  fa:	00 00       	nop
	_delay_us(2000); //wait
	lcd_command(0x06); //shift cursor right
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 102:	08 95       	ret

00000104 <lcd_print>:
}

void lcd_print( char * str )
{
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(str[i]!=0)
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	59 f0       	breq	.+22     	; 0x128 <lcd_print+0x24>
 112:	8f 01       	movw	r16, r30
 114:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_data(str[i]);
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
		i++ ;
 11a:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print( char * str )
{
	unsigned char i = 0;
	while(str[i]!=0)
 11c:	f8 01       	movw	r30, r16
 11e:	ec 0f       	add	r30, r28
 120:	f1 1d       	adc	r31, r1
 122:	80 81       	ld	r24, Z
 124:	81 11       	cpse	r24, r1
 126:	f7 cf       	rjmp	.-18     	; 0x116 <lcd_print+0x12>
	{
		lcd_data(str[i]);
		i++ ;
	}
}
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <usart_init_recv>:
#include "lcd.h"


void usart_init_recv()
{
	UCSRB = (1<<RXEN);
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<< UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	89 b9       	out	0x09, r24	; 9
 13c:	08 95       	ret

0000013e <get_usart_data>:
}

char get_usart_data(){
	while (! (UCSRA & (1<<RXC)));
 13e:	5f 9b       	sbis	0x0b, 7	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <get_usart_data>
	return UDR;
 142:	8c b1       	in	r24, 0x0c	; 12
}
 144:	08 95       	ret

00000146 <main>:

int main(void)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x6>
 14c:	00 d0       	rcall	.+0      	; 0x14e <main+0x8>
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	usart_init_recv();
 154:	0e 94 98 00 	call	0x130	; 0x130 <usart_init_recv>
	lcd_init();
 158:	0e 94 65 00 	call	0xca	; 0xca <lcd_init>
	
	DDRC |= (1<<3);
 15c:	a3 9a       	sbi	0x14, 3	; 20
 15e:	7e 01       	movw	r14, r28
 160:	25 e0       	ldi	r18, 0x05	; 5
 162:	e2 0e       	add	r14, r18
 164:	f1 1c       	adc	r15, r1
	while(1){
		PORTC &= ~(1<<3);
 166:	ab 98       	cbi	0x15, 3	; 21
 168:	8e 01       	movw	r16, r28
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		unsigned char password[5];
		for (char i=0;i<4;i++)
		password[i] = get_usart_data();
 16e:	0e 94 9f 00 	call	0x13e	; 0x13e <get_usart_data>
 172:	f8 01       	movw	r30, r16
 174:	81 93       	st	Z+, r24
 176:	8f 01       	movw	r16, r30
	DDRC |= (1<<3);
	while(1){
		PORTC &= ~(1<<3);
		
		unsigned char password[5];
		for (char i=0;i<4;i++)
 178:	ee 15       	cp	r30, r14
 17a:	ff 05       	cpc	r31, r15
 17c:	c1 f7       	brne	.-16     	; 0x16e <main+0x28>
		password[i] = get_usart_data();
		password[4] = '\0';
 17e:	1d 82       	std	Y+5, r1	; 0x05
		
		lcd_print("entered password");
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 82 00 	call	0x104	; 0x104 <lcd_print>
		lcd_command(0xC0);
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		lcd_print("is ");
 18e:	81 e7       	ldi	r24, 0x71	; 113
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 82 00 	call	0x104	; 0x104 <lcd_print>
		lcd_print((char *)password);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 82 00 	call	0x104	; 0x104 <lcd_print>
		lcd_print(".");
 19e:	85 e7       	ldi	r24, 0x75	; 117
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 82 00 	call	0x104	; 0x104 <lcd_print>
		
		
		PORTC |= (1<<3);
 1a6:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	ff eb       	ldi	r31, 0xBF	; 191
 1aa:	27 e2       	ldi	r18, 0x27	; 39
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	f1 50       	subi	r31, 0x01	; 1
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x68>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x72>
 1b8:	00 00       	nop
		
		_delay_ms(3000);
		lcd_command(0x01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		lcd_command(0x02);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		
		get_usart_data();
 1c6:	0e 94 9f 00 	call	0x13e	; 0x13e <get_usart_data>
	}
 1ca:	cd cf       	rjmp	.-102    	; 0x166 <main+0x20>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
